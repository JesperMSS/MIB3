/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package mib1;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import java.sql.SQLException;
import oru.inf.InfException;
/**
 *
 * @author Jesper
 */
public class AgentUppdateraAlienB extends javax.swing.JFrame {

    private static InfDB idb;
    String alienNamn;

    /**
     * Creates new form AgentUppdateraAlienB
     */
    public AgentUppdateraAlienB(InfDB idb, String pAlienNamn) {
        initComponents();
        this.idb = idb;
       alienNamn = pAlienNamn;
        valLBL.setVisible(true);
        valLBL.setText("Ange antal boogies:");
    }

    AgentUppdateraAlienB() {

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtUpAlien = new javax.swing.JLabel();
        txtDate1 = new javax.swing.JLabel();
        txtDate2 = new javax.swing.JLabel();
        dateVal = new javax.swing.JTextField();
        txtName = new javax.swing.JLabel();
        IDVal = new javax.swing.JTextField();
        txtPassword = new javax.swing.JLabel();
        passwordVal = new javax.swing.JPasswordField();
        txtPhone = new javax.swing.JLabel();
        phoneVal = new javax.swing.JTextField();
        txtChef1 = new javax.swing.JLabel();
        txtChef2 = new javax.swing.JLabel();
        chefVal = new javax.swing.JTextField();
        txtPlats = new javax.swing.JLabel();
        platsVal = new javax.swing.JTextField();
        saveBTN = new javax.swing.JButton();
        tbxBTN = new javax.swing.JButton();
        comboBoxRas = new javax.swing.JComboBox<>();
        txtRas = new javax.swing.JLabel();
        textVal = new javax.swing.JTextField();
        valLBL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtUpAlien.setText("Uppdatera Alien");

        txtDate1.setText("Registreringsdatum");

        txtDate2.setText("(YYYY-MM-DD)");

        dateVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateValActionPerformed(evt);
            }
        });

        txtName.setText("Alien-ID");

        txtPassword.setText("Lösenord");

        txtPhone.setText("Telefonnummer");

        txtChef1.setText("Ansvarig Agent");

        txtChef2.setText("(ID)");

        txtPlats.setText("Plats (ID)");

        saveBTN.setText("Spara");
        saveBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBTNActionPerformed(evt);
            }
        });

        tbxBTN.setText("Tillbaka");
        tbxBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbxBTNActionPerformed(evt);
            }
        });

        comboBoxRas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boglodite", "Squid", "Worm" }));
        comboBoxRas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxRasActionPerformed(evt);
            }
        });

        txtRas.setText("Ras");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUpAlien)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(passwordVal, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtDate1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtDate2, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtName, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(dateVal, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(IDVal, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(txtPassword)
                                    .addComponent(txtRas)
                                    .addComponent(comboBoxRas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtChef1)
                                    .addComponent(txtChef2)
                                    .addComponent(chefVal, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPlats)
                                    .addComponent(platsVal, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPhone)
                                    .addComponent(phoneVal, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textVal, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(valLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(saveBTN)
                        .addGap(18, 18, 18)
                        .addComponent(tbxBTN)))
                .addContainerGap(133, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtUpAlien)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDate1)
                    .addComponent(txtChef1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtChef2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDate2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(dateVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(chefVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtName)
                        .addGap(2, 2, 2)
                        .addComponent(IDVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPassword)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(txtRas))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtPlats)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(platsVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPhone)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(phoneVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(valLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxRas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveBTN)
                    .addComponent(tbxBTN))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBTNActionPerformed
        // Validering som kontrollerar att inga fält är tomma. 
        if(valideringsklass.tomtFalt(dateVal) && valideringsklass.tomtFalt(chefVal) && valideringsklass.tomtFalt(IDVal) && valideringsklass.tomtFalt(platsVal) && valideringsklass.tomtFalt(passwordVal) && valideringsklass.tomtFalt(phoneVal) && valideringsklass.tomtFalt(textVal) ) {
        try {
            String RasSpec = textVal.getText();
            String val = comboBoxRas.getSelectedItem().toString();
            String textSQL;
            String textSQLboglodite;
            String textSQLsquid;
            String textSQLsquidDEL1;
            String textSQLsquidDEL2;
            String textSQLworm;
            String textSQLwormDEL1;
            String textSQLwormDEL2;
            String textSQLbogloditeDEL1;
            String textSQLbogloditeDEL2;
            String name = IDVal.getText();
            String password = passwordVal.getText();
            String phone = phoneVal.getText();
            String date = dateVal.getText();
            // String alienID = IDVal.getText();

            // Konvertering från String till Integer.
            int chef = Integer.parseInt(chefVal.getText());
            int plats = Integer.parseInt(platsVal.getText());
            int alienID = Integer.parseInt(IDVal.getText());
            
            // Konvertering från JavaDate till SQLdate.
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            Date parsedate = format.parse(date);
            java.sql.Date daydate = new java.sql.Date(parsedate.getTime());
          
            String add = idb.getAutoIncrement("Alien", "Alien_ID");
           
            // Uppdaterar databasen med de nya värderna som användaren matat in.
            textSQL = ("update ALIEN set REGISTRERINGSDATUM=" + "'" + daydate + "'" + ",LOSENORD =" + "'" + password + "'" + ",NAMN=" + "'" + name + "'" + ",TELEFON=" + "'" + phone + "'" + ",PLATS=" + plats + ",ANSVARIG_AGENT=" + chef + ",ALIEN_ID=" + alienID + "WHERE NAMN=" + "'" + alienNamn + "'");
            System.out.println(textSQL);
            idb.update(textSQL);

            // Beroende på vilken ras man valt i Combobox läggs det till i rätt tabell.
            if (val.equals("Boglodite")) {
                textSQLboglodite = ("Insert into BOGLODITE (ALIEN_ID, ANTAL_BOOGIES) values ('" + alienID + "','" + RasSpec + "')");
                textSQLbogloditeDEL1 = ("DELETE from SQUID where ALIEN_ID=" + alienID);
                textSQLbogloditeDEL2 = ("DELETE from WORM where ALIEN_ID=" + alienID);
                idb.insert(textSQLboglodite);
                idb.delete(textSQLbogloditeDEL1);
                idb.delete(textSQLbogloditeDEL2);
                System.out.println(textSQLboglodite);
                System.out.println(textSQLbogloditeDEL1);
                System.out.println(textSQLbogloditeDEL2);
                
            } else if (val.equals("Squid")) {
                textSQLsquid = ("Insert into SQUID (ALIEN_ID, ANTAL_ARMAR) values ('" + alienID + "','" + RasSpec + "')");
                textSQLsquidDEL1 = ("DELETE from BOGLODITE where ALIEN_ID=" + alienID);
                textSQLsquidDEL2 = ("DELETE from WORM where ALIEN_ID=" + alienID);
                idb.insert(textSQLsquid);
                idb.delete(textSQLsquidDEL1);
                idb.delete(textSQLsquidDEL2);
                System.out.println(textSQLsquid);
                System.out.println(textSQLsquidDEL1);
                System.out.println(textSQLsquidDEL2);
                
            } else {
                textSQLworm = ("Insert into WORM (ALIEN_ID) values ('" + alienID + "')");
                textSQLwormDEL1 = ("DELETE from BOGLODITE where ALIEN_ID=" + alienID);
                textSQLwormDEL2 = ("DELETE from SQUID where ALIEN_ID=" + alienID);
                idb.insert(textSQLworm);
                idb.delete(textSQLwormDEL1);
                idb.delete(textSQLwormDEL2);
                System.out.println(textSQLworm);
                System.out.println(textSQLwormDEL1);
                System.out.println(textSQLwormDEL2);
            }

            JOptionPane.showMessageDialog(null, "Alien med namn " + alienNamn + " har nu uppdaterats");

        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Fel");

            // Catch för date
        } catch (ParseException ex) {
            Logger.getLogger(AgentUppdateraAlienB.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Fel");
        }
    }//GEN-LAST:event_saveBTNActionPerformed
    }
    private void tbxBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbxBTNActionPerformed
        AgentInloggad tbx = new AgentInloggad(idb);
        tbx.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_tbxBTNActionPerformed

    private void comboBoxRasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxRasActionPerformed

        String val = comboBoxRas.getSelectedItem().toString();
        String fråga = textVal.getText();
        if (val.equals("Squid")) {
            valLBL.setVisible(true);
            valLBL.setText("Ange antal armar:");
            textVal.setVisible(true);
        } else if (val.equals("Boglodite")) {
            valLBL.setVisible(true);
            valLBL.setText("Ange antal boogies:");
            textVal.setVisible(true);
        } else {
            valLBL.setVisible(false);
            valLBL.setText("-");
            textVal.setVisible(false);
        } 
    }//GEN-LAST:event_comboBoxRasActionPerformed

    private void dateValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateValActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateValActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgentUppdateraAlienB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgentUppdateraAlienB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgentUppdateraAlienB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgentUppdateraAlienB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgentUppdateraAlienB().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IDVal;
    private javax.swing.JTextField chefVal;
    private javax.swing.JComboBox<String> comboBoxRas;
    private javax.swing.JTextField dateVal;
    private javax.swing.JPasswordField passwordVal;
    private javax.swing.JTextField phoneVal;
    private javax.swing.JTextField platsVal;
    private javax.swing.JButton saveBTN;
    private javax.swing.JButton tbxBTN;
    private javax.swing.JTextField textVal;
    private javax.swing.JLabel txtChef1;
    private javax.swing.JLabel txtChef2;
    private javax.swing.JLabel txtDate1;
    private javax.swing.JLabel txtDate2;
    private javax.swing.JLabel txtName;
    private javax.swing.JLabel txtPassword;
    private javax.swing.JLabel txtPhone;
    private javax.swing.JLabel txtPlats;
    private javax.swing.JLabel txtRas;
    private javax.swing.JLabel txtUpAlien;
    private javax.swing.JLabel valLBL;
    // End of variables declaration//GEN-END:variables

}
